# ===============================================
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Pastel1")
# PCA ile boyut indirgeme
pca_result <- prcomp(features_sample, center = TRUE, scale. = TRUE)
pca_data <- data.frame(pca_result$x[,1:2], Cluster = factor(data_sample$kmeans_cluster))
# Temel PCA plot'unu oluştur
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Cluster)) +
geom_point(alpha = 0.7, size = 2) +
scale_color_manual(values = palette) +
theme_minimal() +
labs(title = "K-means Kümeleme Sonuçları (PCA)",
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1]*100, 1), "% varyans)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2]*100, 1), "% varyans)")) +
theme(plot.title = element_text(hjust = 0.5))
# Küme merkezlerini PCA uzayına dönüştür
centers_pca <- predict(pca_result, kmeans_sample$centers)
centers_df <- data.frame(centers_pca[,1:2], Cluster = factor(1:n_clusters))
# Merkezlerle birlikte plot
pca_plot_with_centers <- pca_plot +
geom_point(data = centers_df, aes(x = PC1, y = PC2),
color = "black", size = 5, shape = 4, stroke = 2) +
geom_point(data = centers_df, aes(x = PC1, y = PC2, color = Cluster),
size = 3, shape = 16) +
labs(title = "K-means Kümeleme Sonuçları (PCA) - Merkezlerle")
# Plot'ları göster
print(pca_plot)
print(pca_plot_with_centers)
# PCA sonuçları hakkında bilgi
cat("PCA Özet Bilgileri:\n")
cat("PC1 Varyans Açıklaması: ", round(summary(pca_result)$importance[2,1]*100, 2), "%\n")
cat("PC2 Varyans Açıklaması: ", round(summary(pca_result)$importance[2,2]*100, 2), "%\n")
cat("İlk 2 PC Toplam Varyans: ", round(sum(summary(pca_result)$importance[2,1:2])*100, 2), "%\n")
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Set1")
# cluster_colors nesnesini oluştur (palette ile aynı)
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
# Alternatif olarak, eğer küme numaraları 1'den başlıyorsa:
# cluster_colors <- setNames(palette, 1:n_clusters)
print(paste("Küme sayısı:", n_clusters))
print("Renk paleti:")
print(cluster_colors)
# Saatlik desen analizi
hourly_pattern <- data_sample %>%
group_by(Saat, kmeans_cluster) %>%
summarise(
Ortalama = mean(Giris1_Anlik, na.rm = TRUE),
Medyan = median(Giris1_Anlik, na.rm = TRUE),
Std_Sapma = sd(Giris1_Anlik, na.rm = TRUE),
Gozlem_Sayisi = n(),
.groups = 'drop'
) %>%
mutate(kmeans_cluster = factor(kmeans_cluster))  # Factor'e dönüştür
# Saatlik pattern görselleştirme
hourly_plot <- ggplot(hourly_pattern, aes(x = Saat, y = Ortalama, color = kmeans_cluster)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
scale_color_manual(values = cluster_colors, name = "Küme") +
scale_x_continuous(breaks = seq(0, 23, 2)) +
labs(title = "Saatlik Ortalama Desen (Kümelere Göre)",
x = "Saat", y = "Ortalama Giriş1 Anlık") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
print(hourly_plot)
# Gün kategorisi analizi için veriyi hazırla
data_sample_plot <- data_sample %>%
mutate(kmeans_cluster = factor(kmeans_cluster))
# Gün kategorisi görselleştirme
gun_kategori_plot <- ggplot(data_sample_plot, aes(x = Gun_Kategorisi, y = Giris1_Anlik, fill = kmeans_cluster)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = cluster_colors, name = "Küme") +
labs(title = "Gün Kategorilerine Göre Dağılım",
x = "Gün Kategorisi", y = "Giriş1 Anlık") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
print(gun_kategori_plot)
# Özet istatistikler
cat("\nKüme bazlı özet istatistikler:\n")
cluster_summary <- data_sample %>%
group_by(kmeans_cluster) %>%
summarise(
Ortalama = mean(Giris1_Anlik, na.rm = TRUE),
Medyan = median(Giris1_Anlik, na.rm = TRUE),
Std_Sapma = sd(Giris1_Anlik, na.rm = TRUE),
Min = min(Giris1_Anlik, na.rm = TRUE),
Max = max(Giris1_Anlik, na.rm = TRUE),
Gozlem_Sayisi = n(),
.groups = 'drop'
)
print(cluster_summary)
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Set3")
# cluster_colors nesnesini oluştur
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
print(paste("Küme sayısı:", n_clusters))
print("Küme renkleri:")
print(cluster_colors)
# Lag değişkenleri analizi
lag_analysis <- data_sample %>%
select(kmeans_cluster, Giris1_Anlik, Giris1_Anlik_lag1,
Giris1_Anlik_lag2, Giris1_Anlik_lag3, Giris1_Anlik_ma5) %>%
mutate(kmeans_cluster = factor(kmeans_cluster)) %>%  # Factor'e dönüştür
melt(id.vars = "kmeans_cluster")
# Değişken isimlerini daha okunabilir hale getir
lag_analysis$variable <- factor(lag_analysis$variable,
levels = c("Giris1_Anlik", "Giris1_Anlik_lag1",
"Giris1_Anlik_lag2", "Giris1_Anlik_lag3",
"Giris1_Anlik_ma5"),
labels = c("Anlık", "Lag-1", "Lag-2", "Lag-3", "MA-5"))
# Lag analizi görselleştirme
lag_plot <- ggplot(lag_analysis, aes(x = variable, y = value, fill = kmeans_cluster)) +
geom_boxplot(alpha = 0.7, outlier.alpha = 0.3) +
scale_fill_manual(values = cluster_colors, name = "Küme") +
labs(title = "Lag Değişkenleri ve Hareketli Ortalama Analizi",
x = "Değişken", y = "Değer") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
print(lag_plot)
# Lag değişkenleri arasındaki korelasyon analizi
correlation_by_cluster <- data_sample %>%
group_by(kmeans_cluster) %>%
summarise(
Lag1_Cor = cor(Giris1_Anlik, Giris1_Anlik_lag1, use = "complete.obs"),
Lag2_Cor = cor(Giris1_Anlik, Giris1_Anlik_lag2, use = "complete.obs"),
Lag3_Cor = cor(Giris1_Anlik, Giris1_Anlik_lag3, use = "complete.obs"),
MA5_Cor = cor(Giris1_Anlik, Giris1_Anlik_ma5, use = "complete.obs"),
.groups = 'drop'
)
print("Kümelere göre korelasyon analizi:")
print(correlation_by_cluster)
# Alternatif görselleştirme: Facet wrap ile
lag_plot_facet <- ggplot(lag_analysis, aes(x = kmeans_cluster, y = value, fill = kmeans_cluster)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~variable, scales = "free_y", ncol = 3) +
scale_fill_manual(values = cluster_colors, name = "Küme") +
labs(title = "Kümelere Göre Lag Değişkenleri Dağılımı",
x = "Küme", y = "Değer") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
print(lag_plot_facet)
# ===============================================
# 5. SAATLIK VE GÜNLÜK DESEN ANALİZİ
# ===============================================
# Küme boyutları pasta grafiği
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Set1")
# ÖNEMLI: cluster_colors nesnesini oluştur
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
# Kontrol için yazdır
print(paste("Küme sayısı:", n_clusters))
print("Küme renkleri:")
print(cluster_colors)
print("Benzersiz küme değerleri:")
print(sort(unique(data_sample$kmeans_cluster)))
# Saatlik desen analizi
hourly_pattern <- data_sample %>%
group_by(Saat, kmeans_cluster) %>%
summarise(
Ortalama = mean(Giris1_Anlik, na.rm = TRUE),
Medyan = median(Giris1_Anlik, na.rm = TRUE),
Std_Sapma = sd(Giris1_Anlik, na.rm = TRUE),
Gozlem_Sayisi = n(),
.groups = 'drop'
) %>%
mutate(kmeans_cluster = factor(kmeans_cluster))  # Factor'e dönüştür
# Saatlik pattern görselleştirme
hourly_plot <- ggplot(hourly_pattern, aes(x = Saat, y = Ortalama, color = kmeans_cluster)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
scale_color_manual(values = cluster_colors, name = "Küme") +
scale_x_continuous(breaks = seq(0, 23, 2)) +
labs(title = "Saatlik Ortalama Desen (Kümelere Göre)",
x = "Saat", y = "Ortalama Giriş1 Anlık") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom")
print(hourly_plot)
# Gün kategorisi analizi için veriyi hazırla
data_sample_for_plot <- data_sample %>%
mutate(kmeans_cluster = factor(kmeans_cluster))
# Gün kategorisi görselleştirme
gun_kategori_plot <- ggplot(data_sample_for_plot, aes(x = Gun_Kategorisi, y = Giris1_Anlik, fill = kmeans_cluster)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = cluster_colors, name = "Küme") +
labs(title = "Gün Kategorilerine Göre Dağılım",
x = "Gün Kategorisi", y = "Giriş1 Anlık") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
print(gun_kategori_plot)
# Ek analizler
# Saatlik pattern özet tablosu
cat("\nSaatlik pattern özet:\n")
hourly_summary <- hourly_pattern %>%
group_by(kmeans_cluster) %>%
summarise(
Peak_Saat = Saat[which.max(Ortalama)],
Max_Ortalama = max(Ortalama),
Min_Ortalama = min(Ortalama),
Ortalama_Std = mean(Std_Sapma, na.rm = TRUE),
.groups = 'drop'
)
print(hourly_summary)
# Gün kategorisi özet tablosu
cat("\nGün kategorisi özet:\n")
gun_kategori_summary <- data_sample %>%
group_by(Gun_Kategorisi, kmeans_cluster) %>%
summarise(
Ortalama = mean(Giris1_Anlik, na.rm = TRUE),
Medyan = median(Giris1_Anlik, na.rm = TRUE),
Gozlem_Sayisi = n(),
.groups = 'drop'
) %>%
arrange(Gun_Kategorisi, kmeans_cluster)
print(gun_kategori_summary)
# ===============================================
# 10. SİLHOUETTE ANALİZİ DETAYLI
# ===============================================
# Küme boyutları pasta grafiği
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Pastel1")
# ÖNEMLI: cluster_colors nesnesini oluştur
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
# optimal_k tanımla (eğer tanımlanmamışsa)
if (!exists("optimal_k")) {
optimal_k <- n_clusters
}
print(paste("Küme sayısı:", n_clusters))
print(paste("Optimal k:", optimal_k))
print("Küme renkleri:")
print(cluster_colors)
# Silhouette analizi detaylı
sil_analysis <- silhouette(as.numeric(data_sample$kmeans_cluster),
dist(features_sample))
# Temel silhouette bilgileri
cat("\n=== SİLHOUETTE ANALİZİ BAŞLADI ===\n")
cat("Silhouette matrisi boyutu:", dim(sil_analysis), "\n")
cat("Genel Ortalama Silhouette Skoru:", round(mean(sil_analysis[, 3]), 3), "\n")
# Silhouette plot (factoextra ile)
sil_plot1 <- fviz_silhouette(sil_analysis, palette = cluster_colors) +
labs(title = "Silhouette Analizi - Küme Kalitesi") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
print(sil_plot1)
# Manuel silhouette plot (alternatif)
sil_data <- data.frame(
Index = 1:nrow(sil_analysis),
Cluster = factor(sil_analysis[, 1]),
Silhouette_Width = sil_analysis[, 3]
) %>%
arrange(Cluster, desc(Silhouette_Width))
sil_plot2 <- ggplot(sil_data, aes(x = Index, y = Silhouette_Width, fill = Cluster)) +
geom_col(width = 1) +
scale_fill_manual(values = cluster_colors, name = "Küme") +
geom_hline(yintercept = mean(sil_analysis[, 3]),
linetype = "dashed", color = "red", size = 1) +
labs(title = "Silhouette Analizi - Manuel Görselleştirme",
x = "Gözlem İndeksi", y = "Silhouette Genişliği") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
print(sil_plot2)
# Küme bazında silhouette skorları
sil_summary <- data.frame(
Cluster = 1:optimal_k,
Avg_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = mean)$x,
Size = as.numeric(table(sil_analysis[, 1])),
Min_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = min)$x,
Max_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = max)$x
)
cat("\n=== SİLHOUETTE SKOR ÖZETI ===\n")
print(round(sil_summary, 3))
# Küme kalitesi değerlendirmesi
cat("\n=== KÜME KALİTESİ DEĞERLENDİRMESİ ===\n")
overall_score <- mean(sil_analysis[, 3])
cat("Genel Ortalama Silhouette Skoru:", round(overall_score, 3), "\n")
if (overall_score > 0.7) {
cat("Kümeleme Kalitesi: MÜKEMMEİL (0.71-1.00)\n")
} else if (overall_score > 0.5) {
cat("Kümeleme Kalitesi: MAKUL (0.51-0.70)\n")
} else if (overall_score > 0.25) {
cat("Kümeleme Kalitesi: ZAYIF (0.26-0.50)\n")
} else {
cat("Kümeleme Kalitesi: YAPAY KÜME (≤0.25)\n")
}
# Negatif silhouette skorları kontrolü
negative_scores <- sum(sil_analysis[, 3] < 0)
cat("Negatif Silhouette Skoru Olan Gözlem Sayısı:", negative_scores, "\n")
cat("Toplam Gözlem Sayısı:", nrow(sil_analysis), "\n")
cat("Negatif Oran:", round(negative_scores/nrow(sil_analysis)*100, 2), "%\n")
# Küme bazında detaylı analiz
cat("\n=== KÜME BAZINDA DETAYLI ANALİZ ===\n")
for (i in 1:optimal_k) {
cluster_sil <- sil_analysis[sil_analysis[, 1] == i, 3]
cat("Küme", i, ":\n")
cat("  - Ortalama Silhouette:", round(mean(cluster_sil), 3), "\n")
cat("  - Gözlem Sayısı:", length(cluster_sil), "\n")
cat("  - Negatif Skor Sayısı:", sum(cluster_sil < 0), "\n")
cat("  - Min-Max:", round(min(cluster_sil), 3), "-", round(max(cluster_sil), 3), "\n\n")
}
# ===============================================
# 10. SİLHOUETTE ANALİZİ DETAYLI
# ===============================================
# Küme boyutları pasta grafiği
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Pastel1")
# ÖNEMLI: cluster_colors nesnesini oluştur
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
# optimal_k tanımla (eğer tanımlanmamışsa)
if (!exists("optimal_k")) {
optimal_k <- n_clusters
}
print(paste("Kume sayisi:", n_clusters))
print(paste("Optimal k:", optimal_k))
print("Kume renkleri:")
print(cluster_colors)
# Silhouette analizi detaylı
sil_analysis <- silhouette(as.numeric(data_sample$kmeans_cluster),
dist(features_sample))
# Temel silhouette bilgileri
cat("\n=== SİLHOUETTE ANALİZİ BAŞLADI ===\n")
cat("Silhouette matrisi boyutu:", dim(sil_analysis), "\n")
cat("Genel Ortalama Silhouette Skoru:", round(mean(sil_analysis[, 3]), 3), "\n")
# Silhouette plot (factoextra ile)
sil_plot1 <- fviz_silhouette(sil_analysis, palette = cluster_colors) +
labs(title = "Silhouette Analizi - Kume Kalitesi") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
print(sil_plot1)
# Manuel silhouette plot (alternatif)
sil_data <- data.frame(
Index = 1:nrow(sil_analysis),
Cluster = factor(sil_analysis[, 1]),
Silhouette_Width = sil_analysis[, 3]
) %>%
arrange(Cluster, desc(Silhouette_Width))
sil_plot2 <- ggplot(sil_data, aes(x = Index, y = Silhouette_Width, fill = Cluster)) +
geom_col(width = 1) +
scale_fill_manual(values = cluster_colors, name = "Kume") +
geom_hline(yintercept = mean(sil_analysis[, 3]),
linetype = "dashed", color = "red", size = 1) +
labs(title = "Silhouette Analizi - Manuel Gorsellestirme",
x = "Gozlem Indeksi", y = "Silhouette Genisligi") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
print(sil_plot2)
# Küme bazında silhouette skorları
sil_summary <- data.frame(
Cluster = 1:optimal_k,
Avg_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = mean)$x,
Size = as.numeric(table(sil_analysis[, 1])),
Min_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = min)$x,
Max_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = max)$x
)
cat("\n=== SİLHOUETTE SKOR ÖZETI ===\n")
print(round(sil_summary, 3))
# Küme kalitesi değerlendirmesi
cat("\n=== KUME KALİTESİ DEGERLENDİRMESİ ===\n")
overall_score <- mean(sil_analysis[, 3])
cat("Genel Ortalama Silhouette Skoru:", round(overall_score, 3), "\n")
if (overall_score > 0.7) {
cat("Kumeleme Kalitesi: MÜKEMMEİL (0.71-1.00)\n")
} else if (overall_score > 0.5) {
cat("Kumeleme Kalitesi: MAKUL (0.51-0.70)\n")
} else if (overall_score > 0.25) {
cat("Kumeleme Kalitesi: ZAYIF (0.26-0.50)\n")
} else {
cat("Kumeleme Kalitesi: YAPAY KÜME (≤0.25)\n")
}
# Negatif silhouette skorları kontrolü
negative_scores <- sum(sil_analysis[, 3] < 0)
cat("Negatif Silhouette Skoru Olan Gozlem Sayısı:", negative_scores, "\n")
cat("Toplam Gozlem Sayisi:", nrow(sil_analysis), "\n")
cat("Negatif Oran:", round(negative_scores/nrow(sil_analysis)*100, 2), "%\n")
# Küme bazında detaylı analiz
cat("\n=== KUME BAZINDA DETAYLI ANALİZ ===\n")
for (i in 1:optimal_k) {
cluster_sil <- sil_analysis[sil_analysis[, 1] == i, 3]
cat("Küme", i, ":\n")
cat("  - Ortalama Silhouette:", round(mean(cluster_sil), 3), "\n")
cat("  - Gozlem Sayısı:", length(cluster_sil), "\n")
cat("  - Negatif Skor Sayısı:", sum(cluster_sil < 0), "\n")
cat("  - Min-Max:", round(min(cluster_sil), 3), "-", round(max(cluster_sil), 3), "\n\n")
}
# ===============================================
# 10. SİLHOUETTE ANALİZİ DETAYLI
# ===============================================
# Küme boyutları pasta grafiği
# Küme sayısını hesapla ve renk paletini oluştur
n_clusters <- length(unique(data_sample$kmeans_cluster))
palette <- RColorBrewer::brewer.pal(n_clusters, "Pastel1")
# ÖNEMLI: cluster_colors nesnesini oluştur
cluster_colors <- palette
names(cluster_colors) <- sort(unique(data_sample$kmeans_cluster))
# optimal_k tanımla (eğer tanımlanmamışsa)
if (!exists("optimal_k")) {
optimal_k <- n_clusters
}
print(paste("Kume sayisi:", n_clusters))
print(paste("Optimal k:", optimal_k))
print("Kume renkleri:")
print(cluster_colors)
# Silhouette analizi detaylı
sil_analysis <- silhouette(as.numeric(data_sample$kmeans_cluster),
dist(features_sample))
# Temel silhouette bilgileri
cat("\n=== SİLHOUETTE ANALİZİ BAŞLADI ===\n")
cat("Silhouette matrisi boyutu:", dim(sil_analysis), "\n")
cat("Genel Ortalama Silhouette Skoru:", round(mean(sil_analysis[, 3]), 3), "\n")
# Silhouette plot (factoextra ile)
sil_plot1 <- fviz_silhouette(sil_analysis, palette = cluster_colors) +
labs(title = "Silhouette Analizi - Kume Kalitesi") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
print(sil_plot1)
# Manuel silhouette plot (alternatif)
sil_data <- data.frame(
Index = 1:nrow(sil_analysis),
Cluster = factor(sil_analysis[, 1]),
Silhouette_Width = sil_analysis[, 3]
) %>%
arrange(Cluster, desc(Silhouette_Width))
sil_plot2 <- ggplot(sil_data, aes(x = Index, y = Silhouette_Width, fill = Cluster)) +
geom_col(width = 1) +
scale_fill_manual(values = cluster_colors, name = "Kume") +
geom_hline(yintercept = mean(sil_analysis[, 3]),
linetype = "dashed", color = "red", size = 1) +
labs(title = "Silhouette Analizi - Manuel Gorsellestirme",
x = "Gozlem Indeksi", y = "Silhouette Genisligi") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
print(sil_plot2)
# Küme bazında silhouette skorları
sil_summary <- data.frame(
Cluster = 1:optimal_k,
Avg_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = mean)$x,
Size = as.numeric(table(sil_analysis[, 1])),
Min_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = min)$x,
Max_Silhouette = aggregate(sil_analysis[, 3],
by = list(sil_analysis[, 1]),
FUN = max)$x
)
cat("\n=== SİLHOUETTE SKOR ÖZETI ===\n")
print(round(sil_summary, 3))
# Küme kalitesi değerlendirmesi
cat("\n=== KUME KALİTESİ DEGERLENDİRMESİ ===\n")
overall_score <- mean(sil_analysis[, 3])
cat("Genel Ortalama Silhouette Skoru:", round(overall_score, 3), "\n")
if (overall_score > 0.7) {
cat("Kumeleme Kalitesi: MÜKEMMEİL (0.71-1.00)\n")
} else if (overall_score > 0.5) {
cat("Kumeleme Kalitesi: MAKUL (0.51-0.70)\n")
} else if (overall_score > 0.25) {
cat("Kumeleme Kalitesi: ZAYIF (0.26-0.50)\n")
} else {
cat("Kumeleme Kalitesi: YAPAY KÜME (≤0.25)\n")
}
# Negatif silhouette skorları kontrolü
negative_scores <- sum(sil_analysis[, 3] < 0)
cat("Negatif Silhouette Skoru Olan Gozlem Sayısı:", negative_scores, "\n")
cat("Toplam Gozlem Sayisi:", nrow(sil_analysis), "\n")
cat("Negatif Oran:", round(negative_scores/nrow(sil_analysis)*100, 2), "%\n")
# Küme bazında detaylı analiz
cat("\n=== KUME BAZINDA DETAYLI ANALİZ ===\n")
for (i in 1:optimal_k) {
cluster_sil <- sil_analysis[sil_analysis[, 1] == i, 3]
cat("Kume", i, ":\n")
cat("  - Ortalama Silhouette:", round(mean(cluster_sil), 3), "\n")
cat("  - Gozlem Sayısı:", length(cluster_sil), "\n")
cat("  - Negatif Skor Sayısı:", sum(cluster_sil < 0), "\n")
cat("  - Min-Max:", round(min(cluster_sil), 3), "-", round(max(cluster_sil), 3), "\n\n")
}
quarto preview
quarto render
